{"version":3,"sources":["api.js","ContactForm.js","ContactListWithFilter.js","App.js","util.js","index.js"],"names":["baseUrl","PHONE_FIELD_INSTRUCTIONs","capitalize","text","toUpperCase","slice","normalizeName","name","trim","toLowerCase","prettifyName","split","map","join","findContactByName","contacts","find","contact","InputFormField","type","label","id","value","onChange","error","inputRef","props","className","htmlFor","ref","undefined","ContactForm","onAddNew","onUpdate","useState","setName","nameError","setNameError","phone","setPhone","phoneError","setPhoneError","nameInput","setNameInput","existingContact","setExistingContact","useEffect","disabled","event","newName","target","partialPhone","newNumber","length","match","onClick","preventDefault","nameErr","isNewName","validateName","phoneErr","replace","validatePhoneNumber","phoneNumber","focus","mergeClasses","cls","filter","c","IconButton","children","ContactItem","memo","nameFilter","onDelete","sep","i","lowerText","lowerSubstr","indexOf","j","partitionString","prefix","toHighlight","postfix","nameElem","window","confirm","ContactList","results","normalizedFilter","includes","filterContactsByName","ContactListWithFilter","setFilter","placeholder","newFilter","sortByName","sort","a","b","localeCompare","getErrorMessage","err","response","data","isServerSideError","message","errors","App","state","setState","setContacts","setError","fetchAllContacts","axios","get","then","resp","contactList","catch","addNewContact","newContactData","post","newContact","updatedContactList","toast","success","autoClose","console","content","modified","put","updated","log","index","findIndex","newContacts","array","replaceElem","deleted","delete","api","msg","status","details","Error","style","color","Panel","classes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAEMA,EAAU,gB,mBCAVC,EACH,gHAGGC,EAAa,SAACC,GAAD,OAAUA,EAAK,GAAGC,cAAgBD,EAAKE,MAAM,IAE1DC,EAAgB,SAACC,GAAD,OAAUA,EAAKC,OAAOC,eAEtCC,EAAe,SAACH,GAAD,OAClBA,EAAKC,OACDG,MAAM,OACNC,IAAIV,GACJW,KAAK,MAGNC,EAAoB,SAACP,EAAMQ,GAE9B,OADAR,EAAOD,EAAcC,GACdQ,EAASC,MAAK,SAAAC,GAAO,OAAIX,EAAcW,EAAQV,QAAUA,MAsC7DW,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAIC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,MAAOC,EAA5C,EAA4CA,SAAaC,EAAzD,kFACpB,sBAAKC,UAAU,YAAf,UACG,wBAAOC,QAASP,EAAIM,UAAU,mBAA9B,UAAkDP,EAAlD,OACA,mCACGS,IAAKJ,EACLE,UAAYH,EAAS,gBAAaM,EAClCT,GAAIA,EACJF,KAAMA,EACNG,MAAOA,EACPC,SAAUA,GACNG,IAENF,GAAS,qBAAKG,UAAU,mBAAf,SAAmCH,QAIpC,SAASO,EAAT,GAAwD,IAAjChB,EAAgC,EAAhCA,SAAUiB,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAAY,EAC3CC,mBAAS,IADkC,mBAC5D3B,EAD4D,KACtD4B,EADsD,OAEjCD,mBAAS,IAFwB,mBAE5DE,EAF4D,KAEjDC,EAFiD,OAGzCH,mBAAS,IAHgC,mBAG5DI,EAH4D,KAGrDC,EAHqD,OAI/BL,mBAAS,IAJsB,mBAI5DM,EAJ4D,KAIhDC,EAJgD,OAKjCP,mBAAS,MALwB,mBAK5DQ,EAL4D,KAKjDC,EALiD,OAMrBT,mBAAS,MANY,mBAM5DU,EAN4D,KAM3CC,EAN2C,KAQnEC,qBAAU,WACP,IAAI7B,EAAUH,EAAkBP,EAAMQ,GACtC8B,EAAmB5B,KACnB,CAACV,EAAMQ,IAEV,IAqCMgC,GAAYxC,IAAS+B,GAASF,GAAaI,EAEjD,OACG,uBAAMb,UAAU,cAAhB,UACG,cAAC,EAAD,CACGF,SAAUkB,EACVvB,MAAM,OACNC,GAAG,aACHC,MAAOf,EACPiB,MAAOY,EACPb,SA/CU,SAACyB,GACjB,IAAIC,EAAUD,EAAME,OAAO5B,MAC3Ba,EAAQc,MA+CL,cAAC,EAAD,CACG7B,MAAM,eACNC,GAAG,cACHC,MAAOgB,EACPd,MAAOgB,EACPjB,SAjDW,SAACyB,GAClB,IAzD8BG,EAyD1BC,EAAYJ,EAAME,OAAO5B,MACzBE,GAzDP2B,GADiCA,EA0DSC,EAAU5C,QAzDxBA,QACX6C,OAAS,GAChB,+BACLF,EAEAA,EAAaG,MAAM,wBAEjB,KADGrD,EAFA,KAsDPwC,EAAcjB,GACde,EAASa,MA+CN,wBACGjC,KAAK,SACLoC,QA9CM,SAACP,GACbA,EAAMQ,iBACN,IAAIC,EA9EW,SAAClD,EAAMQ,EAAU2C,GAEnC,OADAnD,EAAOD,EAAcC,IAGjBmD,GAAa5C,EAAkBP,EAAMQ,GAC/B,6CACH,GAHG,cA2EO4C,CAAapD,EAAMQ,GAAW6B,GACxCgB,EAvDkB,SAACtB,GAE1B,OADAA,EAAQA,EAAM9B,QACJ6C,OAAS,GACT,+BACMf,EAlBLuB,QAAQ,MAAO,IAAIR,OAkBL,EACf,6CACLf,EAAMgB,MAAM,6BAEV,KADGrD,EAgDQ6D,CAAoBxB,EAAM9B,QACrCiD,GAAWG,GACZvB,EAAaoB,GACbhB,EAAcmB,KAGVhB,EACGN,IAAUM,EAAgBmB,aAC3B9B,EAAS,2BAAKW,GAAN,IAAuBmB,YAAazB,KAG/CN,EAAS,CACNzB,KAAMG,EAAaH,GACnBwD,YAAazB,EAAM9B,SAGzB2B,EAAQ,IACRI,EAAS,IACTG,EAAUsB,UA0BPjB,SAAUA,EACVpB,UAAWiB,EAAkB,+BAA4Bd,EAJ5D,SAMIc,EAAkB,iBAAmB,uB,YCvHlD,SAASqB,IAAsB,IAAD,uBAALC,EAAK,yBAALA,EAAK,gBAC3B,OAAOA,EAAIC,QAAO,SAAAC,GAAC,OAAS,MAALA,KAAWvD,KAAK,KAG1C,IAAMwD,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAU3C,EAAb,EAAaA,UAAcD,EAA3B,+CAChB,gDAAQC,UAAWsC,EAAa,aAActC,IAAgBD,GAA9D,aACI4C,MAIDC,EAAcC,gBAAK,YAAwC,IAArCvD,EAAoC,EAApCA,QAASwD,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAAe,EA1BhE,SAAyBvE,EAAMwE,GAA+B,IACvDC,EACJ,GAF0D,wDAErC,CAClB,IAAIC,EAAY1E,EAAKM,cACjBqE,EAAcH,EAAIlE,cACtBmE,EAAIC,EAAUE,QAAQD,QAGtBF,EAAIzE,EAAK4E,QAAQJ,GAEpB,GAAIC,EAAI,EACL,MAAO,CAACzE,EAAM,GAAI,IACrB,IAAI6E,EAAIJ,EAAID,EAAItB,OAChB,MAAO,CAAClD,EAAKE,MAAM,EAAGuE,GAAIzE,EAAKE,MAAMuE,EAAGI,GAAI7E,EAAKE,MAAMuE,EAAID,EAAItB,SAsB5D4B,CAAgBhE,EAAQV,KAAMkE,GAAY,GATgB,mBAQtDS,EARsD,KAQ9CC,EAR8C,KAQjCC,EARiC,KAWvDC,EAAYF,EACb,iCAAOD,EAAO,iCAASC,IAAsBC,KAC7CnE,EAAQV,KAEb,OACG,qBACGoB,UAAU,cADb,UAIG,sBAAKA,UAAU,oBAAf,UACG,qBAAKA,UAAU,oBAAf,SACI0D,IAEJ,qBAAK1D,UAAU,qBAAf,SACIV,EAAQ8C,iBAIf,qBAAKpC,UAAU,uBAAf,SACG,cAAC,EAAD,CAAYA,UAAU,kBAAkB4B,QA5BzB,WACjB+B,OAAOC,QAAP,uCAA+CtE,EAAQV,KAAvD,OACDmE,EAASzD,EAAQI,KA0Bd,SACG,cAAC,IAAD,UAbDJ,EAAQV,SA2BtB,IAAMiF,EAAchB,gBAAK,YAAyC,IAAtCzD,EAAqC,EAArCA,SAAU0D,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SAC3Ce,EARP,SAA8B1E,EAAUoD,GACrC,IAAIuB,EAAmBvB,EAAO1D,cAC9B,OAAOM,EAASoD,QAAO,SAAAC,GAAC,OACrBA,EAAE7D,KAAKE,cAAckF,SAASD,MAKnBE,CAAqB7E,EAAU0D,GAC7C,OAAuB,IAAnBgB,EAAQpC,OAEN,mBAAG1B,UAAU,qBAAb,SACI8C,EACI,aACA,+BAMX,oBAAI9C,UAAU,cAAd,SACI8D,EAAQ7E,KAAI,SAAAK,GAAO,OACjB,cAACsD,EAAD,CAEGtD,QAASA,EACTwD,WAAYA,EACZC,SAAUA,GAHLzD,EAAQV,cAUb,SAASsF,EAAT,GAAwD,IAAvB9E,EAAsB,EAAtBA,SAAU2D,EAAY,EAAZA,SAAY,EACvCxC,mBAAS,IAD8B,mBAC5DiC,EAD4D,KACpD2B,EADoD,KAQnE,OACG,sBAAKnE,UAAU,wBAAf,UACG,qBAAKA,UAAU,gCAAf,SACG,uBACGR,KAAK,OACLG,MAAO6C,EACP4B,YAAY,oBACZxE,SAZW,SAACyB,GACrB,IAAIgD,EAAYhD,EAAME,OAAO5B,MAC7BwE,EAAUE,QAYP,cAACR,EAAD,CACGzE,SAAUA,EACV0D,WAAYN,EACZO,SAAUA,OCrHtB,SAASuB,EAAWlF,GACjB,OAAOA,EAASmF,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE5F,KAAK8F,cAAcD,EAAE7F,SAOzD,SAAS+F,EAAgBC,GACtB,GALH,SAA2BA,GACxB,OAAOA,EAAIC,UAAYD,EAAIC,SAASC,KAIhCC,CAAkBH,GAAM,CACzB,IAAIE,EAAOF,EAAIC,SAASC,KACxB,GAAIA,EAAKE,QACN,OAAOF,EAAKE,QACf,GAAIF,EAAKG,QAAUH,EAAKG,OAAOvD,OAAS,EACrC,OAAOoD,EAAKG,OAAO,GAAGD,QAE5B,OAAOJ,EAAII,QAGC,SAASE,IAAO,IAAD,EACD3E,mBAAS,WADR,mBACpB4E,EADoB,KACbC,EADa,OAEK7E,mBAAS,IAFd,mBAEpBnB,EAFoB,KAEViG,EAFU,OAGD9E,mBAAS,MAHR,mBAGpBV,EAHoB,KAGbyF,EAHa,KAKrBC,EAAmB,WH/BlBC,IAAMC,IAAIpH,GAASqH,MAAK,SAAAC,GAAI,OAAIA,EAAKb,QGiCrCY,MAAK,SAAAE,GACHP,EAAYf,EAAWsB,IACvBR,EAAS,YAEXS,OAAM,SAAAjB,GACJQ,EAAS,SACTE,EACG,yEACYV,EAAII,cAItBc,EAAa,uCAAG,WAAOC,GAAP,SAAAvB,EAAA,uDH1CElF,EG2CNyG,EH1CXP,IAAMQ,KAAK3H,EAASiB,GACvBoG,MAAK,SAAAC,GAAI,OAAIA,EAAKb,SG0CfY,MAAK,SAAAO,GACH,IAAIC,EAAkB,sBAAO9G,GAAP,CAAiB6G,IACvCZ,EAAYf,EAAW4B,IACvBC,IAAMC,QAAN,UACMH,EAAWrH,KADjB,cAEG,CAAEyH,UAAW,SAGlBR,OAAM,SAAAjB,GACJ0B,QAAQzG,MAAM+E,GACd,IAAII,EAAUL,EAAgBC,GAC9BuB,IAAMtG,MAAN,yBAA8BkG,EAAenH,KAA7C,wBAAiEoG,OAbpD,iCH1ClB,IAAoB1F,IG0CF,OAAH,sDAyDnB6B,oBAAUoE,EAAkB,IAE5B,IAAIgB,EAAU,KACd,GAAc,UAAVpB,EACDoB,EACG,qCACG,cAAC,EAAD,CAAOvG,UAAU,iBAAjB,SACG,cAACI,EAAD,CACGhB,SAAUA,EACViB,SAAUyF,EACVxF,SAlDO,SAACkG,GHlDnB,IAAuBlH,KGmDNkH,EHlDdhB,IAAMiB,IAAN,UAAapI,EAAb,YAAwBiB,EAAQI,IAAMJ,GACzCoG,MAAK,SAAAC,GAAI,OAAIA,EAAKb,SGkDfY,MAAK,SAAAgB,GACHJ,QAAQK,IAAID,GACZ,IAAIE,EAAQxH,EAASyH,WAAU,SAAApE,GAAC,OAAIA,EAAE/C,KAAO8G,EAAS9G,MAClDoH,ECvET,SAAqBC,EAAOH,EAAOjH,GACvC,MAAM,GAAN,mBACMoH,EAAMrI,MAAM,EAAGkI,IADrB,CAEGjH,GAFH,YAGMoH,EAAMrI,MAAMkI,EAAQ,KDmECI,CAAY5H,EAAUwH,EAAOF,GAC/CrB,EAAYf,EAAWwC,IACvBX,IAAMC,QAAN,yBACqBM,EAAQ9H,KAD7B,mCAGFiH,OAAM,SAAAjB,GACJ0B,QAAQzG,MAAM+E,GACduB,IAAMtG,MAAN,4BACwB2G,EAAS5H,KADjC,uBACoD+F,EAAgBC,aAwCpE,cAAC,EAAD,CAAO5E,UAAU,qBAAjB,SACG,cAACkE,EAAD,CACG9E,SAAUA,EACV2D,SAvCO,SAACrD,GACpB,IAAIuH,EAAU7H,EAASC,MAAK,SAAAoD,GAAC,OAAIA,EAAE/C,KAAOA,MHxEzC,SAAuBA,GAC3B,OAAO8F,IAAM0B,OAAN,UAAgB7I,EAAhB,YAA2BqB,KGwE/ByH,CAAkBzH,GACdgG,MAAK,SAAAC,GACHN,EAAYjG,EAASoD,QAAO,SAAAC,GAAC,OAAIA,EAAE/C,KAAOA,MAC1CyG,IAAMC,QAAN,WAAkBa,EAAQrI,KAA1B,mCAEFiH,OAAM,SAAAjB,GAEJ,IAAIwC,EACJ,GAFAd,QAAQK,IAAI/B,GAERA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASwC,OAC9B9B,IACA6B,EAAM,oBAAaH,EAAQrI,KAArB,+BACH,wDAED,CACF,IAAI0I,EAAU3C,EAAgBC,GAC9BwC,EAAG,4BAAwBH,EAAQrI,KAAhC,uBAAmD0I,GAEzDnB,IAAMtG,MAAMuH,mBA0BhB,GAAc,YAAVjC,EACNoB,EAAU,SAER,IAAc,UAAVpB,EAIN,MAAM,IAAIoC,MAAM,iBAHhBhB,EAAU,mBAAGiB,MAAO,CAAEC,MAAO,OAAnB,SAA6B5H,IAK1C,OACG,sBAAKG,UAAU,MAAf,UACG,cAAC,IAAD,IACA,oBAAIA,UAAU,SAAd,uBACA,qBAAKA,UAAU,UAAf,SACIuG,OAMb,IAAMmB,EAAQ,SAAC,GAA6B,IAA3B1H,EAA0B,EAA1BA,UAAW2C,EAAe,EAAfA,SACrBgF,EAAU,SAAW,IAAM3H,IAAa,GAC5C,OACG,qBAAKA,UAAW2H,EAAhB,SACIhF,KErJViF,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC5C,EAAD,MAEH6C,SAASC,eAAe,W","file":"static/js/main.c03833d7.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/contacts'\n\n\nexport function getAllContacts() {\n   return axios.get(baseUrl).then(resp => resp.data)\n}\n\nexport function addContact(contact) {\n   return axios.post(baseUrl, contact)\n      .then(resp => resp.data)\n}\n\nexport function deleteContact(id) {\n   return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport function updateContact(contact) {\n   return axios.put(`${baseUrl}/${contact.id}`, contact)\n      .then(resp => resp.data)\n}","import React, { useEffect, useState } from 'react'\n\nconst PHONE_FIELD_INSTRUCTIONs =\n   'A phone number can only contain digits separated by a single space ' +\n   'or \"-\". Optionally, it can start with \"+\".'\n\nconst capitalize = (text) => text[0].toUpperCase() + text.slice(1);\n\nconst normalizeName = (name) => name.trim().toLowerCase()\n\nconst prettifyName = (name) => (\n   name.trim()\n      .split(/\\s+/)\n      .map(capitalize)\n      .join(' ')\n)\n\nconst findContactByName = (name, contacts) => {\n   name = normalizeName(name);\n   return contacts.find(contact => normalizeName(contact.name) === name)\n}\n\nconst validateName = (name, contacts, isNewName) => {\n   name = normalizeName(name)\n   if (!name)\n      return 'Empty name!'\n   if (isNewName && findContactByName(name, contacts))\n      return 'This name already exists in the phonebook!'\n   return '';\n}\n\nconst countDigits = (str) => {\n   return str.replace(/\\D/g, '').length\n}\n\nconst validatePartialPhoneNumber = (partialPhone) => {\n   partialPhone = partialPhone.trim();\n   if (partialPhone.length > 20)\n      return 'Too long! Max 20 characters.'\n   if (!partialPhone)\n      return null\n   if (!partialPhone.match(/^[+]?([0-9]+[- ]?)*$/))\n      return PHONE_FIELD_INSTRUCTIONs;\n   return null;\n}\n\nconst validatePhoneNumber = (phone) => {\n   phone = phone.trim();\n   if (phone.length > 20)\n      return 'Too long! Max 20 characters.'\n   if (countDigits(phone) < 8)\n      return 'Too short! Must contain at least 8 digits!'\n   if (!phone.match(/^[+]?[0-9]+([ -][0-9]+)*$/))\n      return PHONE_FIELD_INSTRUCTIONs\n   return null;\n}\n\nconst InputFormField = ({ type, label, id, value, onChange, error, inputRef, ...props }) => (\n   <div className=\"FormField\">\n      <label htmlFor={id} className=\"FormField__label\">{label}:</label>\n      <input\n         ref={inputRef}\n         className={(error) ? \"in-error\" : undefined}\n         id={id}\n         type={type}\n         value={value}\n         onChange={onChange}\n         {...props}\n      />\n      {error && <div className=\"FormField__error\">{error}</div>}\n   </div>\n)\n\nexport default function ContactForm({ contacts, onAddNew, onUpdate }) {\n   const [name, setName] = useState('')\n   const [nameError, setNameError] = useState('')\n   const [phone, setPhone] = useState('')\n   const [phoneError, setPhoneError] = useState('')\n   const [nameInput, setNameInput] = useState(null)\n   const [existingContact, setExistingContact] = useState(null)\n\n   useEffect(() => {\n      let contact = findContactByName(name, contacts)\n      setExistingContact(contact)\n   }, [name, contacts])\n\n   const updateName = (event) => {\n      let newName = event.target.value\n      setName(newName)\n   }\n\n   const updatePhone = (event) => {\n      let newNumber = event.target.value\n      let error = validatePartialPhoneNumber(newNumber.trim())\n      setPhoneError(error)\n      setPhone(newNumber)\n   }\n\n   const submit = (event) => {\n      event.preventDefault()\n      let nameErr = validateName(name, contacts, !existingContact)\n      let phoneErr = validatePhoneNumber(phone.trim(), contacts)\n      if (nameErr || phoneErr) {\n         setNameError(nameErr)\n         setPhoneError(phoneErr)\n      }\n      else {\n         if (existingContact) {\n            if (phone !== existingContact.phoneNumber)\n               onUpdate({ ...existingContact, phoneNumber: phone })\n         }\n         else {\n            onAddNew({\n               name: prettifyName(name),\n               phoneNumber: phone.trim()\n            })\n         }\n         setName('')\n         setPhone('')\n         nameInput.focus();\n      }\n   }\n\n   const disabled = !name || !phone || nameError || phoneError;\n\n   return (\n      <form className=\"ContactForm\">\n         <InputFormField\n            inputRef={setNameInput}\n            label=\"Name\"\n            id=\"name-field\"\n            value={name}\n            error={nameError}\n            onChange={updateName}\n         />\n         <InputFormField\n            label=\"Phone number\"\n            id=\"phone-field\"\n            value={phone}\n            error={phoneError}\n            onChange={updatePhone}\n         />\n         <button\n            type=\"submit\"\n            onClick={submit}\n            disabled={disabled}\n            className={existingContact ? \"ContactForm__update-btn\" : undefined}\n         >\n            {existingContact ? \"Update contact\" : \"Add new contact\"}\n         </button>\n      </form>\n   )\n}\n","import React, { useState, memo } from 'react'\nimport { FaTrash } from 'react-icons/fa'\n\n/**\n * Partition the string into three parts using the given separator.\n * This will search for the separator in the string. If the separator is found\n * returns a 3-Array containing the part before the separator, the part matching\n * the separator (with the original case), and the part after it.\n * \n * The match of the separator is case-insensitive if [caseInsensitive] is true.\n * \n * Inspired by Python str.partition.\n */\nfunction partitionString(text, sep, caseInsensitive = false) {\n   let i;\n   if (caseInsensitive) {\n      let lowerText = text.toLowerCase();\n      let lowerSubstr = sep.toLowerCase();\n      i = lowerText.indexOf(lowerSubstr);\n   }\n   else {\n      i = text.indexOf(sep);\n   }\n   if (i < 0)\n      return [text, '', '']\n   let j = i + sep.length;\n   return [text.slice(0, i), text.slice(i, j), text.slice(i + sep.length)]\n}\n\nfunction mergeClasses(...cls) {\n   return cls.filter(c => c != null).join(' ')\n}\n\nconst IconButton = ({ children, className, ...props }) => (\n   <button className={mergeClasses(\"IconButton\", className)} {...props}>\n      {children}\n   </button>\n)\n\nconst ContactItem = memo(({ contact, nameFilter, onDelete }) => {\n\n   const confirmDeletion = () => {\n      if (window.confirm(`Do you really want to delete ${contact.name}?`))\n         onDelete(contact.id)\n   }\n\n   // Highlight the query (if present)\n   const [prefix, toHighlight, postfix] =\n      partitionString(contact.name, nameFilter, true)\n\n   const nameElem = (toHighlight)\n      ? <span>{prefix}<strong>{toHighlight}</strong>{postfix}</span>\n      : contact.name;\n\n   return (\n      <li\n         className=\"ContactItem\"\n         key={contact.name}\n      >\n         <div className=\"ContactItem__info\">\n            <div className=\"ContactItem__name\">\n               {nameElem}\n            </div>\n            <div className=\"ContactItem__phone\">\n               {contact.phoneNumber}\n            </div>\n         </div>\n\n         <div className=\"ContactItem__buttons\">\n            <IconButton className=\"IconButton--red\" onClick={confirmDeletion}>\n               <FaTrash />\n            </IconButton>\n         </div>\n      </li>\n   )\n})\n\nfunction filterContactsByName(contacts, filter) {\n   let normalizedFilter = filter.toLowerCase();\n   return contacts.filter(c => (\n      c.name.toLowerCase().includes(normalizedFilter)\n   ))\n}\n\nconst ContactList = memo(({ contacts, nameFilter, onDelete }) => {\n   let results = filterContactsByName(contacts, nameFilter);\n   if (results.length === 0) {\n      return (\n         <p className=\"ContactList--empty\">\n            {nameFilter\n               ? \"No matches\"\n               : \"The contact list is empty.\"}\n         </p>\n      )\n   }\n\n   return (\n      <ul className=\"ContactList\">\n         {results.map(contact => (\n            <ContactItem\n               key={contact.name}\n               contact={contact}\n               nameFilter={nameFilter}\n               onDelete={onDelete}\n            />\n         ))}\n      </ul>\n   )\n})\n\nexport default function ContactListWithFilter({ contacts, onDelete }) {\n   const [filter, setFilter] = useState('')\n\n   const onFilterChange = (event) => {\n      let newFilter = event.target.value;\n      setFilter(newFilter)\n   }\n\n   return (\n      <div className=\"ContactListWithFilter\">\n         <div className=\"ContactListWithFilter__header\">\n            <input\n               type=\"text\"\n               value={filter}\n               placeholder=\"Filter by name...\"\n               onChange={onFilterChange} />\n         </div>\n         <ContactList\n            contacts={contacts}\n            nameFilter={filter}\n            onDelete={onDelete}\n         />\n      </div>\n   )\n}","import React, { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport * as api from './api'\n\nimport ContactForm from './ContactForm'\nimport ContactListWithFilter from './ContactListWithFilter'\nimport { replaceElem } from './util';\n\n\n/**\n * WARNING: mutate the Array in-place!\n */\nfunction sortByName(contacts) {\n   return contacts.sort((a, b) => a.name.localeCompare(b.name))\n}\n\nfunction isServerSideError(err) {\n   return err.response && err.response.data;\n}\n\nfunction getErrorMessage(err) {\n   if (isServerSideError(err)) {\n      let data = err.response.data;\n      if (data.message) \n         return data.message;\n      if (data.errors && data.errors.length > 0)\n         return data.errors[0].message;\n   }\n   return err.message\n}\n\nexport default function App() {\n   const [state, setState] = useState(\"loading\")\n   const [contacts, setContacts] = useState([])\n   const [error, setError] = useState(null)\n\n   const fetchAllContacts = () => {\n      api.getAllContacts()\n         .then(contactList => {\n            setContacts(sortByName(contactList))\n            setState(\"ready\")\n         })\n         .catch(err => {\n            setState(\"error\")\n            setError(\n               \"Error while trying to fetch data from the server.\\n\" +\n               `Details: ${err.message}`)\n         })\n   }\n\n   const addNewContact = async (newContactData) => {\n      api.addContact(newContactData)\n         .then(newContact => {\n            let updatedContactList = [...contacts, newContact]\n            setContacts(sortByName(updatedContactList))\n            toast.success(\n               `${newContact.name} was saved`,\n               { autoClose: 3000 }\n            )\n         })\n         .catch(err => {\n            console.error(err)\n            let message = getErrorMessage(err)\n            toast.error(`Failed to add \"${newContactData.name}\". Details:  ${message}`)\n         })\n   }\n\n   const updateContact = (modified) => {\n      api.updateContact(modified)\n         .then(updated => {\n            console.log(updated);\n            let index = contacts.findIndex(c => c.id === modified.id)\n            let newContacts = replaceElem(contacts, index, updated)\n            setContacts(sortByName(newContacts))\n            toast.success(\n               `The number of \"${updated.name}\" was successfully updated.`)\n         })\n         .catch(err => {\n            console.error(err)\n            toast.error(\n               `Failed to update \"${modified.name}\". Details: ${getErrorMessage(err)}`)\n         })\n   }\n\n   const deleteContact = (id) => {\n      let deleted = contacts.find(c => c.id === id);\n      api.deleteContact(id)\n         .then(resp => {\n            setContacts(contacts.filter(c => c.id !== id))  // preserve sorting\n            toast.success(`\"${deleted.name}\" was successfully deleted.`)\n         })\n         .catch(err => {\n            console.log(err)\n            let msg;\n            if (err.response && err.response.status === 404) {\n               fetchAllContacts()\n               msg = `It seems \"${deleted.name}\" had already been deleted.` +\n                  \" You were using a stale tab, but now you're okay!\"\n            }\n            else {\n               let details = getErrorMessage(err);\n               msg = `Failed to delete \"${deleted.name}\". Details: ${details}`\n            }\n            toast.error(msg)\n         })\n   }\n\n   useEffect(fetchAllContacts, [])\n\n   let content = null;\n   if (state === 'ready') {\n      content = (\n         <>\n            <Panel className=\"add-item-panel\">\n               <ContactForm\n                  contacts={contacts}\n                  onAddNew={addNewContact}\n                  onUpdate={updateContact}\n               />\n            </Panel>\n            <Panel className=\"contact-list-panel\">\n               <ContactListWithFilter\n                  contacts={contacts}\n                  onDelete={deleteContact}\n               />\n            </Panel>\n         </>\n      )\n   }\n   else if (state === 'loading') {\n      content = null   // FIXME: put a spinner here\n   }\n   else if (state === 'error') {\n      content = <p style={{ color: 'red' }}>{error}</p>\n   }\n   else\n      throw new Error('invalid state');\n\n   return (\n      <div className=\"App\">\n         <ToastContainer />\n         <h1 className=\"header\">PhoneBook</h1>\n         <div className=\"content\">\n            {content}\n         </div>\n      </div >\n   )\n}\n\nconst Panel = ({ className, children }) => {\n   let classes = 'Panel' + (' ' + className || '')\n   return (\n      <div className={classes}>\n         {children}\n      </div>\n   )\n}","\n\nexport function replaceElem(array, index, value) {\n   return [\n      ...array.slice(0, index),\n      value,\n      ...array.slice(index + 1)\n   ]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}