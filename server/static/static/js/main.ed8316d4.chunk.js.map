{"version":3,"sources":["api.js","ContactForm.js","ContactListWithFilter.js","App.js","util.js","index.js"],"names":["baseUrl","PHONE_FIELD_INSTRUCTIONs","capitalize","text","toUpperCase","slice","normalizeName","name","trim","toLowerCase","prettifyName","split","map","join","findContactByName","contacts","find","contact","InputFormField","type","label","id","value","onChange","error","inputRef","props","className","htmlFor","ref","undefined","ContactForm","onAddNew","onUpdate","useState","setName","nameError","setNameError","phone","setPhone","phoneError","setPhoneError","nameInput","setNameInput","existingContact","setExistingContact","useEffect","disabled","event","newName","target","partialPhone","newNumber","match","onClick","preventDefault","nameErr","isNewName","validateName","phoneErr","validatePhoneNumber","phoneNumber","focus","mergeClasses","cls","filter","c","IconButton","children","ContactItem","memo","nameFilter","onDelete","sep","i","lowerText","lowerSubstr","indexOf","j","length","partitionString","prefix","toHighlight","postfix","nameElem","window","confirm","ContactList","results","normalizedFilter","includes","filterContactsByName","ContactListWithFilter","setFilter","placeholder","newFilter","sortByName","sort","a","b","localeCompare","App","state","setState","setContacts","setError","fetchAllContacts","axios","get","then","resp","data","contactList","catch","err","message","addNewContact","newContactData","post","newContact","updatedContactList","toast","success","autoClose","console","log","content","modified","put","updated","index","findIndex","newContacts","array","replaceElem","deleted","delete","api","msg","response","status","Error","style","color","Panel","classes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed8316d4.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/contacts'\n\n\nexport function getAllContacts() {\n   return axios.get(baseUrl).then(resp => resp.data)\n}\n\nexport function addContact(contact) {\n   return axios.post(baseUrl, contact)\n      .then(resp => resp.data)\n}\n\nexport function deleteContact(id) {\n   return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport function updateContact(contact) {\n   return axios.put(`${baseUrl}/${contact.id}`, contact)\n      .then(resp => resp.data)\n}","import React, { useEffect, useState } from 'react'\n\nconst PHONE_FIELD_INSTRUCTIONs =\n   'A phone number can only contain digits separated by a single space ' +\n   'or \"-\". Optionally, it can start with \"+\".'\n\nconst capitalize = (text) => text[0].toUpperCase() + text.slice(1);\n\nconst normalizeName = (name) => name.trim().toLowerCase()\n\nconst prettifyName = (name) => (\n   name.trim()\n      .split(/\\s+/)\n      .map(capitalize)\n      .join(' ')\n)\n\nconst findContactByName = (name, contacts) => {\n   name = normalizeName(name);\n   return contacts.find(contact => normalizeName(contact.name) === name)\n}\n\nconst validatePartialPhoneNumber = (partialPhone) => {\n   partialPhone = partialPhone.trim();\n   if (!partialPhone)\n      return ''\n   if (!partialPhone.match(/^[+]?([0-9]+[- ]?)*$/))\n      return PHONE_FIELD_INSTRUCTIONs;\n   return '';\n}\n\nconst validateName = (name, contacts, isNewName) => {\n   name = normalizeName(name)\n   if (!name)\n      return 'Empty name!'\n   if (isNewName && findContactByName(name, contacts))\n      return 'This name already exists in the phonebook!'\n   return '';\n}\n\nconst validatePhoneNumber = (phone) => {\n   phone = phone.trim();\n   if (!phone)\n      return 'Empty phone number!'\n   if (!phone.match(/^[+]?[0-9]+([ -][0-9]+)*$/))\n      return PHONE_FIELD_INSTRUCTIONs\n   return '';\n}\n\nconst InputFormField = ({ type, label, id, value, onChange, error, inputRef, ...props }) => (\n   <div className=\"FormField\">\n      <label htmlFor={id} className=\"FormField__label\">{label}:</label>\n      <input\n         ref={inputRef}\n         className={(error) ? \"in-error\" : undefined}\n         id={id}\n         type={type}\n         value={value}\n         onChange={onChange}\n         {...props}\n      />\n      {error && <div className=\"FormField__error\">{error}</div>}\n   </div>\n)\n\nexport default function ContactForm({ contacts, onAddNew, onUpdate }) {\n   const [name, setName] = useState('')\n   const [nameError, setNameError] = useState('')\n   const [phone, setPhone] = useState('')\n   const [phoneError, setPhoneError] = useState('')\n   const [nameInput, setNameInput] = useState(null)\n   const [existingContact, setExistingContact] = useState(null)\n\n   useEffect(() => {\n      let contact = findContactByName(name, contacts)\n      setExistingContact(contact)\n   }, [name, contacts])\n\n   const updateName = (event) => {\n      let newName = event.target.value\n      setName(newName)\n   }\n\n   const updatePhone = (event) => {\n      let newNumber = event.target.value\n      let error = validatePartialPhoneNumber(newNumber.trim())\n      setPhoneError(error)\n      setPhone(newNumber)\n   }\n\n   const submit = (event) => {\n      event.preventDefault()\n      let nameErr = validateName(name, contacts, !existingContact)\n      let phoneErr = validatePhoneNumber(phone.trim(), contacts)\n      if (nameErr || phoneErr) {\n         setNameError(nameErr)\n         setPhoneError(phoneErr)\n      }\n      else {\n         if (existingContact) {\n            if (phone !== existingContact.phoneNumber)\n               onUpdate({ ...existingContact, phoneNumber: phone })\n         }\n         else {\n            onAddNew({\n               name: prettifyName(name),\n               phoneNumber: phone.trim()\n            })\n         }\n         setName('')\n         setPhone('')\n         nameInput.focus();\n      }\n   }\n\n   const disabled = !name || !phone || nameError || phoneError;\n\n   return (\n      <form className=\"ContactForm\">\n         <InputFormField\n            inputRef={setNameInput}\n            label=\"Name\"\n            id=\"name-field\"\n            value={name}\n            error={nameError}\n            onChange={updateName}\n         />\n         <InputFormField\n            label=\"Phone number\"\n            id=\"phone-field\"\n            value={phone}\n            error={phoneError}\n            onChange={updatePhone}\n         />\n         <button\n            type=\"submit\"\n            onClick={submit}\n            disabled={disabled}\n            className={existingContact ? \"ContactForm__update-btn\" : undefined}\n         >\n            {existingContact ? \"Update contact\" : \"Add new contact\"}\n         </button>\n      </form>\n   )\n}\n","import React, { useState, memo } from 'react'\nimport { FaTrash } from 'react-icons/fa'\n\n/**\n * Partition the string into three parts using the given separator.\n * This will search for the separator in the string. If the separator is found\n * returns a 3-Array containing the part before the separator, the part matching\n * the separator (with the original case), and the part after it.\n * \n * The match of the separator is case-insensitive if [caseInsensitive] is true.\n * \n * Inspired by Python str.partition.\n */\nfunction partitionString(text, sep, caseInsensitive = false) {\n   let i;\n   if (caseInsensitive) {\n      let lowerText = text.toLowerCase();\n      let lowerSubstr = sep.toLowerCase();\n      i = lowerText.indexOf(lowerSubstr);\n   }\n   else {\n      i = text.indexOf(sep);\n   }\n   if (i < 0)\n      return [text, '', '']\n   let j = i + sep.length;\n   return [text.slice(0, i), text.slice(i, j), text.slice(i + sep.length)]\n}\n\nfunction mergeClasses(...cls) {\n   return cls.filter(c => c != null).join(' ')\n}\n\nconst IconButton = ({ children, className, ...props }) => (\n   <button className={mergeClasses(\"IconButton\", className)} {...props}>\n      {children}\n   </button>\n)\n\nconst ContactItem = memo(({ contact, nameFilter, onDelete }) => {\n\n   const confirmDeletion = () => {\n      if (window.confirm(`Do you really want to delete ${contact.name}?`))\n         onDelete(contact.id)\n   }\n\n   // Highlight the query (if present)\n   const [prefix, toHighlight, postfix] =\n      partitionString(contact.name, nameFilter, true)\n\n   const nameElem = (toHighlight)\n      ? <span>{prefix}<strong>{toHighlight}</strong>{postfix}</span>\n      : contact.name;\n\n   return (\n      <li\n         className=\"ContactItem\"\n         key={contact.name}\n      >\n         <div className=\"ContactItem__info\">\n            <div className=\"ContactItem__name\">\n               {nameElem}\n            </div>\n            <div className=\"ContactItem__phone\">\n               {contact.phoneNumber}\n            </div>\n         </div>\n\n         <div className=\"ContactItem__buttons\">\n            <IconButton className=\"IconButton--red\" onClick={confirmDeletion}>\n               <FaTrash />\n            </IconButton>\n         </div>\n      </li>\n   )\n})\n\nfunction filterContactsByName(contacts, filter) {\n   let normalizedFilter = filter.toLowerCase();\n   return contacts.filter(c => (\n      c.name.toLowerCase().includes(normalizedFilter)\n   ))\n}\n\nconst ContactList = memo(({ contacts, nameFilter, onDelete }) => {\n   let results = filterContactsByName(contacts, nameFilter);\n   if (results.length === 0) {\n      return (\n         <p className=\"ContactList--empty\">\n            {nameFilter\n               ? \"No matches\"\n               : \"The contact list is empty.\"}\n         </p>\n      )\n   }\n\n   return (\n      <ul className=\"ContactList\">\n         {results.map(contact => (\n            <ContactItem\n               key={contact.name}\n               contact={contact}\n               nameFilter={nameFilter}\n               onDelete={onDelete}\n            />\n         ))}\n      </ul>\n   )\n})\n\nexport default function ContactListWithFilter({ contacts, onDelete }) {\n   const [filter, setFilter] = useState('')\n\n   const onFilterChange = (event) => {\n      let newFilter = event.target.value;\n      setFilter(newFilter)\n   }\n\n   return (\n      <div className=\"ContactListWithFilter\">\n         <div className=\"ContactListWithFilter__header\">\n            <input\n               type=\"text\"\n               value={filter}\n               placeholder=\"Filter by name...\"\n               onChange={onFilterChange} />\n         </div>\n         <ContactList\n            contacts={contacts}\n            nameFilter={filter}\n            onDelete={onDelete}\n         />\n      </div>\n   )\n}","import React, { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport * as api from './api'\n\nimport ContactForm from './ContactForm'\nimport ContactListWithFilter from './ContactListWithFilter'\nimport { replaceElem } from './util';\n\n\n/**\n * WARNING: mutate the Array in-place!\n */\nfunction sortByName(contacts) {\n   return contacts.sort((a, b) => a.name.localeCompare(b.name))\n}\n\nexport default function App() {\n   const [state, setState] = useState(\"loading\")\n   const [contacts, setContacts] = useState([])\n   const [error, setError] = useState(null)\n\n   const fetchAllContacts = () => {\n      api.getAllContacts()\n         .then(contactList => {\n            setContacts(sortByName(contactList))\n            setState(\"ready\")\n         })\n         .catch(err => {\n            setState(\"error\")\n            setError(\n               \"Error while trying to fetch data from the server.\\n\" +\n               `Details: ${err.message}`)\n         })\n   }\n\n   const addNewContact = async (newContactData) => {\n      api.addContact(newContactData)\n         .then(newContact => {\n            let updatedContactList = [...contacts, newContact]\n            setContacts(sortByName(updatedContactList))\n            toast.success(\n               `${newContact.name} was saved`,\n               { autoClose: 3000 }\n            )\n         })\n         .catch(err => {\n            console.log(err)\n            toast.error(\n               'There was a problem sending the new contact to the server. ' +\n               'The contact could not be saved, sorry. Error: ' + err.message)\n         })\n   }\n\n   const updateContact = (modified) => {\n      api.updateContact(modified)\n         .then(updated => {\n            console.log(updated);\n            let index = contacts.findIndex(c => c.id === modified.id)\n            let newContacts = replaceElem(contacts, index, updated)\n            setContacts(sortByName(newContacts))\n            toast.success(\n               `The number of \"${updated.name}\" was updated with success.`)\n         })\n         .catch(err => {\n            toast.error(\n               `There was a problem while trying to update \"${modified.name}\". ` +\n               \"Details: \" + err.message)\n         })\n   }\n\n   const deleteContact = (id) => {\n      let deleted = contacts.find(c => c.id === id);\n      api.deleteContact(id)\n         .then(resp => {\n            setContacts(contacts.filter(c => c.id !== id))  // preserve sorting\n            toast.success(`\"${deleted.name}\" was deleted with success.`)\n         })\n         .catch(err => {\n            console.log(err)\n            let msg;\n            if (err.response && err.response.status === 404) {\n               fetchAllContacts()\n               msg = `It seems \"${deleted.name}\" had already been deleted. ` +\n                  \" You were using a stale tab, but now you're okay!\"\n            }\n            else {\n               msg = `There was a problem while trying to delete \"${deleted.name}\". ` +\n                  \"Details: \" + err.message\n            }\n            toast.error(msg)\n         })\n   }\n\n   useEffect(fetchAllContacts, [])\n\n   let content = null;\n   if (state === 'ready') {\n      content = (\n         <>\n            <Panel className=\"add-item-panel\">\n               <ContactForm\n                  contacts={contacts}\n                  onAddNew={addNewContact}\n                  onUpdate={updateContact}\n               />\n            </Panel>\n            <Panel className=\"contact-list-panel\">\n               <ContactListWithFilter\n                  contacts={contacts}\n                  onDelete={deleteContact}\n               />\n            </Panel>\n         </>\n      )\n   }\n   else if (state === 'loading') {\n      content = null   // FIXME: put a spinner here\n   }\n   else if (state === 'error') {\n      content = <p style={{ color: 'red' }}>{error}</p>\n   }\n   else\n      throw new Error('invalid state');\n\n   return (\n      <div className=\"App\">\n         <ToastContainer />\n         <h1 className=\"header\">PhoneBook</h1>\n         <div className=\"content\">\n            {content}\n         </div>\n      </div >\n   )\n}\n\nconst Panel = ({ className, children }) => {\n   let classes = 'Panel' + (' ' + className || '')\n   return (\n      <div className={classes}>\n         {children}\n      </div>\n   )\n}","\n\nexport function replaceElem(array, index, value) {\n   return [\n      ...array.slice(0, index),\n      value,\n      ...array.slice(index + 1)\n   ]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}