{"version":3,"sources":["api.js","ContactForm.js","ContactListWithFilter.js","App.js","util.js","index.js"],"names":["baseUrl","PHONE_FIELD_INSTRUCTIONs","capitalize","text","toUpperCase","slice","normalizeName","name","trim","toLowerCase","prettifyName","split","map","join","checkMinLength","field","value","minLen","length","Error","checkMaxLength","maxLen","findContactByName","contacts","find","contact","checkNameDoesNotExist","validateName","exists_okay","isPartial","err","message","countDigits","str","replace","validatePhoneNumber","phone","match","InputFormField","type","label","id","onChange","error","inputRef","props","className","htmlFor","ref","undefined","ContactForm","onAddNew","onUpdate","useState","setName","nameError","setNameError","setPhone","phoneError","setPhoneError","nameInput","setNameInput","existingContact","setExistingContact","useEffect","disabled","event","newName","target","newNumber","onClick","preventDefault","nameErr","phoneErr","phoneNumber","focus","mergeClasses","cls","filter","c","IconButton","children","ContactItem","memo","nameFilter","onDelete","sep","i","lowerText","lowerSubstr","indexOf","j","partitionString","prefix","toHighlight","postfix","nameElem","window","confirm","ContactList","results","normalizedFilter","includes","filterContactsByName","ContactListWithFilter","setFilter","placeholder","newFilter","sortByName","sort","a","b","localeCompare","getErrorMessage","response","data","isServerSideError","errors","App","state","setState","setContacts","setError","fetchAllContacts","axios","get","then","resp","contactList","catch","addNewContact","newContactData","post","newContact","updatedContactList","toast","success","autoClose","console","content","modified","put","updated","log","index","findIndex","newContacts","array","replaceElem","deleted","delete","api","msg","status","details","style","color","Panel","classes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.098c9303.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/contacts'\n\n\nexport function getAllContacts() {\n   return axios.get(baseUrl).then(resp => resp.data)\n}\n\nexport function addContact(contact) {\n   return axios.post(baseUrl, contact)\n      .then(resp => resp.data)\n}\n\nexport function deleteContact(id) {\n   return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport function updateContact(contact) {\n   return axios.put(`${baseUrl}/${contact.id}`, contact)\n      .then(resp => resp.data)\n}","import React, { useEffect, useState } from 'react'\n\nconst PHONE_FIELD_INSTRUCTIONs =\n   'A phone number can only contain digits separated by a single space ' +\n   'or \"-\". Optionally, it can start with \"+\".'\n\nconst capitalize = (text) => text[0].toUpperCase() + text.slice(1);\n\nconst normalizeName = (name) => name.trim().toLowerCase()\n\nconst prettifyName = (name) => (\n   name.trim()\n      .split(/\\s+/)\n      .map(capitalize)\n      .join(' ')\n)\n\nconst checkMinLength = (field, value, minLen) => {\n   if (value.length < minLen)\n      throw new Error(`Too short! The ${field} must be at least ${minLen} characters long`)\n}\n\nconst checkMaxLength = (field, value, maxLen) => {\n   if (value.length > maxLen)\n      throw new Error(`Too long! The ${field} must be at most ${maxLen} characters long`)\n}\n\nconst findContactByName = (name, contacts) => {\n   name = normalizeName(name);\n   return contacts.find(contact => normalizeName(contact.name) === name)\n}\n\nconst checkNameDoesNotExist = (name, contacts) => {\n   if (findContactByName(name, contacts))\n      throw new Error('This name already exists in the phonebook!')\n}\n\nconst validateName = (name, contacts, { exists_okay = true, isPartial = false } = {}) => {\n   name = normalizeName(name)\n   try {\n      if (!isPartial)\n         checkMinLength('name', name, 3)\n      checkMaxLength('name', name, 30)\n\n      if (!exists_okay)  // currently unused\n         checkNameDoesNotExist(name, contacts)\n   }\n   catch (err) {\n      return err.message\n   }\n}\n\nconst countDigits = (str) => {\n   return str.replace(/\\D/g, '').length\n}\n\nconst validatePhoneNumber = (phone, { isPartial = false } = {}) => {\n   const field = 'phone number'\n   phone = phone.trim();\n   try {\n      checkMaxLength(field, phone, 20)\n      if (isPartial) {\n         if (!phone.match(/^[+]?([0-9]+[- ]?)*$/))\n            return PHONE_FIELD_INSTRUCTIONs;\n      }\n      else {\n         if (countDigits(phone) < 8)\n            return 'Too short! Must contain at least 8 digits!'\n         if (!phone.match(/^[+]?[0-9]+([ -][0-9]+)*$/))\n            return PHONE_FIELD_INSTRUCTIONs\n      }\n   }\n   catch (err) {\n      return err.message\n   }\n}\n\nconst InputFormField = ({ type, label, id, value, onChange, error, inputRef, ...props }) => (\n   <div className=\"FormField\">\n      <label htmlFor={id} className=\"FormField__label\">{label}:</label>\n      <input\n         ref={inputRef}\n         className={(error) ? \"in-error\" : undefined}\n         id={id}\n         type={type}\n         value={value}\n         onChange={onChange}\n         {...props}\n      />\n      {error && <div className=\"FormField__error\">{error}</div>}\n   </div>\n)\n\nexport default function ContactForm({ contacts, onAddNew, onUpdate }) {\n   const [name, setName] = useState('')\n   const [nameError, setNameError] = useState('')\n   const [phone, setPhone] = useState('')\n   const [phoneError, setPhoneError] = useState('')\n   const [nameInput, setNameInput] = useState(null)\n   const [existingContact, setExistingContact] = useState(null)\n\n   useEffect(() => {\n      let contact = findContactByName(name, contacts)\n      setExistingContact(contact)\n   }, [name, contacts])\n\n   const updateName = (event) => {\n      let newName = event.target.value\n      let error = validateName(newName, contacts, { isPartial: true })\n      setNameError(error)\n      setName(newName)\n   }\n\n   const updatePhone = (event) => {\n      let newNumber = event.target.value\n      let error = validatePhoneNumber(newNumber, { isPartial: true })\n      setPhoneError(error)\n      setPhone(newNumber)\n   }\n\n   const submit = (event) => {\n      event.preventDefault()\n      let nameErr = validateName(name, contacts)\n      let phoneErr = validatePhoneNumber(phone, contacts)\n      if (nameErr || phoneErr) {\n         setNameError(nameErr)\n         setPhoneError(phoneErr)\n      }\n      else {\n         if (existingContact && (phone !== existingContact.phoneNumber)) {\n            onUpdate({ ...existingContact, phoneNumber: phone })\n         }\n         else {\n            onAddNew({\n               name: prettifyName(name),\n               phoneNumber: phone.trim()\n            })\n         }\n         setName('')\n         setPhone('')\n         nameInput.focus();\n      }\n   }\n\n   const disabled = !name || !phone || nameError || phoneError;\n\n   return (\n      <form className=\"ContactForm\">\n         <InputFormField\n            inputRef={setNameInput}\n            label=\"Name\"\n            id=\"name-field\"\n            value={name}\n            error={nameError}\n            onChange={updateName}\n         />\n         <InputFormField\n            label=\"Phone number\"\n            id=\"phone-field\"\n            value={phone}\n            error={phoneError}\n            onChange={updatePhone}\n         />\n         <button\n            type=\"submit\"\n            onClick={submit}\n            disabled={disabled}\n            className={existingContact ? \"ContactForm__update-btn\" : undefined}\n         >\n            {existingContact ? \"Update contact\" : \"Add new contact\"}\n         </button>\n      </form>\n   )\n}\n","import React, { useState, memo } from 'react'\nimport { FaTrash } from 'react-icons/fa'\n\n/**\n * Partition the string into three parts using the given separator.\n * This will search for the separator in the string. If the separator is found\n * returns a 3-Array containing the part before the separator, the part matching\n * the separator (with the original case), and the part after it.\n * \n * The match of the separator is case-insensitive if [caseInsensitive] is true.\n * \n * Inspired by Python str.partition.\n */\nfunction partitionString(text, sep, caseInsensitive = false) {\n   let i;\n   if (caseInsensitive) {\n      let lowerText = text.toLowerCase();\n      let lowerSubstr = sep.toLowerCase();\n      i = lowerText.indexOf(lowerSubstr);\n   }\n   else {\n      i = text.indexOf(sep);\n   }\n   if (i < 0)\n      return [text, '', '']\n   let j = i + sep.length;\n   return [text.slice(0, i), text.slice(i, j), text.slice(i + sep.length)]\n}\n\nfunction mergeClasses(...cls) {\n   return cls.filter(c => c != null).join(' ')\n}\n\nconst IconButton = ({ children, className, ...props }) => (\n   <button className={mergeClasses(\"IconButton\", className)} {...props}>\n      {children}\n   </button>\n)\n\nconst ContactItem = memo(({ contact, nameFilter, onDelete }) => {\n\n   const confirmDeletion = () => {\n      if (window.confirm(`Do you really want to delete ${contact.name}?`))\n         onDelete(contact.id)\n   }\n\n   // Highlight the query (if present)\n   const [prefix, toHighlight, postfix] =\n      partitionString(contact.name, nameFilter, true)\n\n   const nameElem = (toHighlight)\n      ? <span>{prefix}<strong>{toHighlight}</strong>{postfix}</span>\n      : contact.name;\n\n   return (\n      <li\n         className=\"ContactItem\"\n         key={contact.name}\n      >\n         <div className=\"ContactItem__info\">\n            <div className=\"ContactItem__name\">\n               {nameElem}\n            </div>\n            <div className=\"ContactItem__phone\">\n               {contact.phoneNumber}\n            </div>\n         </div>\n\n         <div className=\"ContactItem__buttons\">\n            <IconButton className=\"IconButton--red\" onClick={confirmDeletion}>\n               <FaTrash />\n            </IconButton>\n         </div>\n      </li>\n   )\n})\n\nfunction filterContactsByName(contacts, filter) {\n   let normalizedFilter = filter.toLowerCase();\n   return contacts.filter(c => (\n      c.name.toLowerCase().includes(normalizedFilter)\n   ))\n}\n\nconst ContactList = memo(({ contacts, nameFilter, onDelete }) => {\n   let results = filterContactsByName(contacts, nameFilter);\n   if (results.length === 0) {\n      return (\n         <p className=\"ContactList--empty\">\n            {nameFilter\n               ? \"No matches\"\n               : \"The contact list is empty.\"}\n         </p>\n      )\n   }\n\n   return (\n      <ul className=\"ContactList\">\n         {results.map(contact => (\n            <ContactItem\n               key={contact.name}\n               contact={contact}\n               nameFilter={nameFilter}\n               onDelete={onDelete}\n            />\n         ))}\n      </ul>\n   )\n})\n\nexport default function ContactListWithFilter({ contacts, onDelete }) {\n   const [filter, setFilter] = useState('')\n\n   const onFilterChange = (event) => {\n      let newFilter = event.target.value;\n      setFilter(newFilter)\n   }\n\n   return (\n      <div className=\"ContactListWithFilter\">\n         <div className=\"ContactListWithFilter__header\">\n            <input\n               type=\"text\"\n               value={filter}\n               placeholder=\"Filter by name...\"\n               onChange={onFilterChange} />\n         </div>\n         <ContactList\n            contacts={contacts}\n            nameFilter={filter}\n            onDelete={onDelete}\n         />\n      </div>\n   )\n}","import React, { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport * as api from './api'\n\nimport ContactForm from './ContactForm'\nimport ContactListWithFilter from './ContactListWithFilter'\nimport { replaceElem } from './util';\n\n\n/**\n * WARNING: mutate the Array in-place!\n */\nfunction sortByName(contacts) {\n   return contacts.sort((a, b) => a.name.localeCompare(b.name))\n}\n\nfunction isServerSideError(err) {\n   return err.response && err.response.data;\n}\n\nfunction getErrorMessage(err) {\n   if (isServerSideError(err)) {\n      let data = err.response.data;\n      if (data.message) \n         return data.message;\n      if (data.errors && data.errors.length > 0)\n         return data.errors[0].message;\n   }\n   return err.message\n}\n\nexport default function App() {\n   const [state, setState] = useState(\"loading\")\n   const [contacts, setContacts] = useState([])\n   const [error, setError] = useState(null)\n\n   const fetchAllContacts = () => {\n      api.getAllContacts()\n         .then(contactList => {\n            setContacts(sortByName(contactList))\n            setState(\"ready\")\n         })\n         .catch(err => {\n            setState(\"error\")\n            setError(\n               \"Error while trying to fetch data from the server.\\n\" +\n               `Details: ${err.message}`)\n         })\n   }\n\n   const addNewContact = async (newContactData) => {\n      api.addContact(newContactData)\n         .then(newContact => {\n            let updatedContactList = [...contacts, newContact]\n            setContacts(sortByName(updatedContactList))\n            toast.success(\n               `${newContact.name} was saved`,\n               { autoClose: 3000 }\n            )\n         })\n         .catch(err => {\n            console.error(err)\n            let message = getErrorMessage(err)\n            toast.error(`Failed to add \"${newContactData.name}\". Details:  ${message}`)\n         })\n   }\n\n   const updateContact = (modified) => {\n      api.updateContact(modified)\n         .then(updated => {\n            console.log(updated);\n            let index = contacts.findIndex(c => c.id === modified.id)\n            let newContacts = replaceElem(contacts, index, updated)\n            setContacts(sortByName(newContacts))\n            toast.success(\n               `The number of \"${updated.name}\" was successfully updated.`)\n         })\n         .catch(err => {\n            console.error(err)\n            toast.error(\n               `Failed to update \"${modified.name}\". Details: ${getErrorMessage(err)}`)\n         })\n   }\n\n   const deleteContact = (id) => {\n      let deleted = contacts.find(c => c.id === id);\n      api.deleteContact(id)\n         .then(resp => {\n            setContacts(contacts.filter(c => c.id !== id))  // preserve sorting\n            toast.success(`\"${deleted.name}\" was successfully deleted.`)\n         })\n         .catch(err => {\n            console.log(err)\n            let msg;\n            if (err.response && err.response.status === 404) {\n               fetchAllContacts()\n               msg = `It seems \"${deleted.name}\" had already been deleted.` +\n                  \" You were using a stale tab, but now you're okay!\"\n            }\n            else {\n               let details = getErrorMessage(err);\n               msg = `Failed to delete \"${deleted.name}\". Details: ${details}`\n            }\n            toast.error(msg)\n         })\n   }\n\n   useEffect(fetchAllContacts, [])\n\n   let content = null;\n   if (state === 'ready') {\n      content = (\n         <>\n            <Panel className=\"add-item-panel\">\n               <ContactForm\n                  contacts={contacts}\n                  onAddNew={addNewContact}\n                  onUpdate={updateContact}\n               />\n            </Panel>\n            <Panel className=\"contact-list-panel\">\n               <ContactListWithFilter\n                  contacts={contacts}\n                  onDelete={deleteContact}\n               />\n            </Panel>\n         </>\n      )\n   }\n   else if (state === 'loading') {\n      content = null   // FIXME: put a spinner here\n   }\n   else if (state === 'error') {\n      content = <p style={{ color: 'red' }}>{error}</p>\n   }\n   else\n      throw new Error('invalid state');\n\n   return (\n      <div className=\"App\">\n         <ToastContainer />\n         <h1 className=\"header\">PhoneBook</h1>\n         <div className=\"content\">\n            {content}\n         </div>\n      </div >\n   )\n}\n\nconst Panel = ({ className, children }) => {\n   let classes = 'Panel' + (' ' + className || '')\n   return (\n      <div className={classes}>\n         {children}\n      </div>\n   )\n}","\n\nexport function replaceElem(array, index, value) {\n   return [\n      ...array.slice(0, index),\n      value,\n      ...array.slice(index + 1)\n   ]\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}